package migrations

import (
	"log"

	"gorm.io/gorm"
)

// MigrateExistingUserRoles –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ä–æ–ª–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ–≤—É—é
func MigrateExistingUserRoles(db *gorm.DB) error {
	log.Println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ä–æ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

	// 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π
	var users []struct {
		ID   uint   `gorm:"column:id"`
		Role string `gorm:"column:role"`
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ role –≤ —Ç–∞–±–ª–∏—Ü–µ users
	if db.Migrator().HasColumn(&struct{ Role string }{}, "role") {
		err := db.Table("users").Select("id, role").Where("role IS NOT NULL AND role != ''").Find(&users).Error
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
			return err
		}

		log.Printf("üìä –ù–∞–π–¥–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏", len(users))

		// 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
		for _, user := range users {
			// –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ –∏–º–µ–Ω–∏
			var role struct {
				ID uint `gorm:"column:id"`
			}
			err := db.Table("roles").Select("id").Where("name = ?", user.Role).First(&role).Error
			if err != nil {
				log.Printf("‚ö†Ô∏è –†–æ–ª—å '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", user.Role, user.ID, err)
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ —É–∂–µ —Ä–æ–ª—å
			var count int64
			err = db.Table("user_roles").Where("user_id = ? AND role_id = ? AND is_active = 1", user.ID, role.ID).Count(&count).Error
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–æ–ª–∏: %v", err)
				continue
			}

			if count > 0 {
				log.Printf("‚úÖ –†–æ–ª—å '%s' —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID %d", user.Role, user.ID)
				continue
			}

			// –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
			err = db.Exec(`
				INSERT INTO user_roles (user_id, role_id, assigned_by, assigned_at, is_active, created_at, updated_at)
				VALUES (?, ?, ?, NOW(), 1, NOW(), NOW())
			`, user.ID, role.ID, user.ID).Error

			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ '%s' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID %d: %v", user.Role, user.ID, err)
				continue
			}

			log.Printf("‚úÖ –†–æ–ª—å '%s' —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID %d", user.Role, user.ID)
		}
	} else {
		log.Println("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ 'role' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ users - –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
	}

	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–æ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}
