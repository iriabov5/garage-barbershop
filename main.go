package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"garage-barbershop/internal/config"
	"garage-barbershop/internal/database"
	"garage-barbershop/internal/handlers"
	"garage-barbershop/internal/models"
	"garage-barbershop/internal/repositories"
	"garage-barbershop/internal/services"

	"github.com/redis/go-redis/v9"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
var (
	cfg *config.Config
	db  *database.Database
	rdb *redis.Client
)

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
func connectDB() error {
	if cfg.DatabaseURL == "" {
		log.Println("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
		return nil
	}

	var err error
	db, err = database.NewDatabase(cfg.DatabaseURL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: %v", err)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
	if err := migrateDB(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: %v", err)
	}

	return nil
}

// –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func migrateDB() error {
	if db == nil {
		return nil
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
	err := db.Migrate(
		&models.User{},
		&models.Service{},
		&models.Appointment{},
		&models.WorkingHours{},
		&models.Payment{},
		&models.Review{},
	)

	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: %v", err)
	}

	return nil
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
func connectRedis() error {
	redisURL := os.Getenv("REDIS_URL")
	if redisURL == "" {
		log.Println("‚ö†Ô∏è  REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")
		return nil
	}

	opt, err := redis.ParseURL(redisURL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Redis URL: %v", err)
	}

	rdb = redis.NewClient(opt)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	ctx := context.Background()
	_, err = rdb.Ping(ctx).Result()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: %v", err)
	}

	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Dependency Injection)
func setupDependencies() {
	if db == nil {
		log.Println("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	userRepo := repositories.NewUserRepository(db.DB)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
	userService := services.NewUserService(userRepo)

	// –°–æ–∑–¥–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
	userHandler := handlers.NewUserHandler(userService)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API routes
	setupAPIRoutes(userHandler)
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
func setupAPIRoutes(userHandler *handlers.UserHandler) {
	// API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	http.HandleFunc("/api/users", userHandler.GetUsers)
	http.HandleFunc("/api/users/", userHandler.GetUser)
	http.HandleFunc("/api/users/create", userHandler.CreateUser)
	
	log.Println("‚úÖ API –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
func loggingMiddleware(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
		if os.Getenv("ENVIRONMENT") != "production" {
			log.Printf("üåê %s %s %s", r.Method, r.URL.Path, r.RemoteAddr)
		}

		next(w, r)

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ production
		duration := time.Since(start)
		if os.Getenv("ENVIRONMENT") == "production" && duration > 100*time.Millisecond {
			log.Printf("SLOW: %s %s took %v", r.Method, r.URL.Path, duration)
		} else if os.Getenv("ENVIRONMENT") != "production" {
			log.Printf("‚è±Ô∏è  %s %s completed in %v", r.Method, r.URL.Path, duration)
		}
	}
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg = config.LoadConfig()

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤ development
	if !cfg.IsProduction() {
		log.Println("üöÄ –ó–∞–ø—É—Å–∫ Garage Barbershop —Å–µ—Ä–≤–µ—Ä–∞...")
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
	if err := connectDB(); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: %v", err)
	}

	if err := connectRedis(); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	setupDependencies()

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	http.HandleFunc("/", loggingMiddleware(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "text/html; charset=utf-8")

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ development
		if os.Getenv("ENVIRONMENT") != "production" {
			log.Println("üìÑ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
		}

		html := `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Garage Barbershop</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            text-align: center;
            max-width: 500px;
        }
        h1 {
            color: #333;
            margin-bottom: 1rem;
        }
        .status {
            color: #28a745;
            font-weight: bold;
            margin: 1rem 0;
        }
        .info {
            color: #666;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü™í Garage Barbershop</h1>
        <div class="status">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!</div>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–æ–º</p>
        <div class="info">
            <p>–í–µ—Ä—Å–∏—è: 1.0.0</p>
            <p>–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
        </div>
    </div>
</body>
</html>`

		fmt.Fprint(w, html)
	}))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API —Å—Ç–∞—Ç—É—Å–∞
	http.HandleFunc("/api/status", loggingMiddleware(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ development
		if os.Getenv("ENVIRONMENT") != "production" {
			log.Println("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ API")
		}
		fmt.Fprintf(w, `{
			"status": "ok",
			"service": "Garage Barbershop",
			"version": "1.0.0",
			"message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
			"timestamp": "%s"
		}`, time.Now().Format(time.RFC3339))
	}))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è health check
	http.HandleFunc("/health", loggingMiddleware(func(w http.ResponseWriter, r *http.Request) {
		// Health check –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º - –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ
		w.WriteHeader(http.StatusOK)
		fmt.Fprint(w, "OK")
	}))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
	http.HandleFunc("/api/db-status", loggingMiddleware(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")

		status := map[string]interface{}{
			"postgresql": "disconnected",
			"redis":      "disconnected",
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
		if db != nil {
			sqlDB, err := db.DB.DB()
			if err == nil {
				if err := sqlDB.Ping(); err == nil {
					status["postgresql"] = "connected"
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
		if rdb != nil {
			ctx := context.Background()
			if _, err := rdb.Ping(ctx).Result(); err == nil {
				status["redis"] = "connected"
			}
		}

		fmt.Fprintf(w, `{
			"databases": %+v,
			"timestamp": "%s"
		}`, status, time.Now().Format(time.RFC3339))
	}))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö
	http.HandleFunc("/api/models", loggingMiddleware(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")

		models := map[string]interface{}{
			"User": map[string]interface{}{
				"description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã (–±–∞—Ä–±–µ—Ä—ã –∏ –∫–ª–∏–µ–Ω—Ç—ã)",
				"fields":      []string{"ID", "TelegramID", "Username", "FirstName", "LastName", "Phone", "Email", "Role", "IsActive", "Specialties", "Experience", "Rating", "Preferences", "Notes"},
			},
			"Service": map[string]interface{}{
				"description": "–£—Å–ª—É–≥–∏ –±–∞—Ä–±–µ—Ä–∞",
				"fields":      []string{"ID", "Name", "Description", "Price", "Duration", "IsActive", "BarberID"},
			},
			"Appointment": map[string]interface{}{
				"description": "–ó–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏",
				"fields":      []string{"ID", "DateTime", "Duration", "Status", "ClientID", "BarberID", "ServiceID", "Notes", "Price", "PaymentStatus"},
			},
			"WorkingHours": map[string]interface{}{
				"description": "–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –±–∞—Ä–±–µ—Ä–∞",
				"fields":      []string{"ID", "DayOfWeek", "StartTime", "EndTime", "BreakStart", "BreakEnd", "IsActive", "BarberID"},
			},
			"Payment": map[string]interface{}{
				"description": "–ü–ª–∞—Ç–µ–∂–∏",
				"fields":      []string{"ID", "Amount", "Currency", "Status", "PaymentMethod", "AppointmentID", "ExternalID", "ReceiptURL"},
			},
			"Review": map[string]interface{}{
				"description": "–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤",
				"fields":      []string{"ID", "Rating", "Comment", "ClientID", "BarberID", "AppointmentID"},
			},
		}

		fmt.Fprintf(w, `{
			"models": %+v,
			"timestamp": "%s"
		}`, models, time.Now().Format(time.RFC3339))
	}))

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	port := cfg.Port

	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ —Ç–æ–ª—å–∫–æ –≤ development
	if !cfg.IsProduction() {
		log.Printf("üöÄ Garage Barbershop —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
		log.Printf("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:%s –≤ –±—Ä–∞—É–∑–µ—Ä–µ", port)
		log.Printf("üåç Environment: %s", cfg.Environment)
		log.Printf("‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: %s", time.Now().Format(time.RFC3339))
		log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
	} else {
		// –í production —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		log.Printf("Server starting on port %s", port)
	}

	log.Fatal(http.ListenAndServe(":"+port, nil))
}
