package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"time"
)

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
func loggingMiddleware(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		log.Printf("üåê %s %s %s - %s", r.Method, r.URL.Path, r.RemoteAddr, r.UserAgent())
		
		next(w, r)
		
		duration := time.Since(start)
		log.Printf("‚è±Ô∏è  %s %s completed in %v", r.Method, r.URL.Path, duration)
	}
}

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Garage Barbershop —Å–µ—Ä–≤–µ—Ä–∞...")
	
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	http.HandleFunc("/", loggingMiddleware(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		log.Println("üìÑ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
		
		html := `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Garage Barbershop</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            text-align: center;
            max-width: 500px;
        }
        h1 {
            color: #333;
            margin-bottom: 1rem;
        }
        .status {
            color: #28a745;
            font-weight: bold;
            margin: 1rem 0;
        }
        .info {
            color: #666;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü™í Garage Barbershop</h1>
        <div class="status">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!</div>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–æ–º</p>
        <div class="info">
            <p>–í–µ—Ä—Å–∏—è: 1.0.0</p>
            <p>–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
        </div>
    </div>
</body>
</html>`
		
		fmt.Fprint(w, html)
	}))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API —Å—Ç–∞—Ç—É—Å–∞
	http.HandleFunc("/api/status", loggingMiddleware(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		log.Println("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ API")
		fmt.Fprintf(w, `{
			"status": "ok",
			"service": "Garage Barbershop",
			"version": "1.0.0",
			"message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
			"timestamp": "%s"
		}`, time.Now().Format(time.RFC3339))
	}))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è health check
	http.HandleFunc("/health", loggingMiddleware(func(w http.ResponseWriter, r *http.Request) {
		log.Println("üíö Health check –∑–∞–ø—Ä–æ—Å")
		w.WriteHeader(http.StatusOK)
		fmt.Fprint(w, "OK")
	}))

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8080
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
	log.Printf("üöÄ Garage Barbershop —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	log.Printf("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:%s –≤ –±—Ä–∞—É–∑–µ—Ä–µ", port)
	log.Printf("üåç Environment: %s", os.Getenv("ENVIRONMENT"))
	log.Printf("‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: %s", time.Now().Format(time.RFC3339))
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
	log.Fatal(http.ListenAndServe(":"+port, nil))
}
